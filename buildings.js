class Building {
    constructor(type) {
        this.type = type;
        this.cells = [];
        this.placed = false;
        this.rotation = 0;
        this.placementTime = Date.now();
        this.romashkaBonus = 0;
        this.bonusActive = false;
        this.bonusEndTime = 0;

        this.setupBuilding();
    }

    setupBuilding() {
        const buildingConfigs = {
            PARK: {
                name: "üå≥ –ü–∞—Ä–∫",
                color: "#27ae60",
                basePoints: 50,
                maxPlacements: 1,
                placementsLeft: 1,
                cellPattern: [[1,0], [1,-1], [0,-1], [-1,0], [0,1], [1,1]], // –ö–æ–ª—å—Ü–æ –∏–∑ 6 –∫–ª–µ—Ç–æ–∫, —Ü–µ–Ω—Ç—Ä [0,0] –ø—É—Å—Ç–æ–π
                description: "–ó–∞–Ω–∏–º–∞–µ—Ç 6 –∫–ª–µ—Ç–æ–∫ –ø–æ –∫—Ä—É–≥—É<br>+30% —Ü–µ–Ω—Ç—Ä—É, +10 —Å–æ—Å–µ–¥—è–º",
                size: 6,
                hasEmptyCenter: true, // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–ª–µ—Ç–∫–∞ –ø—É—Å—Ç–∞—è
                centerCell: [0,0] // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–ª–µ—Ç–∫–∏
            },
            DORMITORY: {
                name: "üè¢ –û–±—â–µ–∂–∏—Ç–∏–µ",
                color: "#95a5a6",
                basePoints: 150,
                maxPlacements: Infinity,
                placementsLeft: Infinity,
                cellPattern: [[0,0], [1,0]],
                description: "150 –æ—á–∫–æ–≤/–º–∏–Ω—É—Ç—É<br>–ó–∞–Ω–∏–º–∞–µ—Ç 2 –∫–ª–µ—Ç–∫–∏",
                size: 2
            },
            ROMASHKA: {
                name: "üåº –†–æ–º–∞—à–∫–∞",
                color: "#ecf0f1",
                basePoints: 30,
                maxPlacements: 3,
                placementsLeft: 3,
                cellPattern: [[0,0]],
                description: "+5 –æ—á–∫–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å<br>30 –æ—á–∫–æ–≤/–º–∏–Ω—É—Ç—É",
                size: 1
            },
            KMK: {
                name: "üè≠ –ö–ú–ö",
                color: "#e67e22",
                basePoints: 80,
                maxPlacements: 5,
                placementsLeft: 5,
                cellPattern: [[0,0], [1,0], [2,0]],
                description: "–û—á–∫–∏ –∑–∞ 5 –º–∏–Ω—É—Ç –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π<br>80 –æ—á–∫–æ–≤/–º–∏–Ω—É—Ç—É",
                size: 3
            },
            CANDLE: {
                name: "üïØÔ∏è –°–≤–µ—á–∫–∞",
                color: "#e74c3c",
                basePoints: 50,
                maxPlacements: 1,
                placementsLeft: 1,
                cellPattern: [[0,0]],
                description: "+100% —Å–æ—Å–µ–¥–Ω–∏–º –∑–¥–∞–Ω–∏—è–º<br>50 –æ—á–∫–æ–≤/–º–∏–Ω—É—Ç—É",
                size: 1
            },
            MANEGE: {
                name: "üèüÔ∏è –ú–∞–Ω–µ–∂",
                color: "#9b59b6",
                basePoints: 75,
                maxPlacements: Infinity,
                placementsLeft: Infinity,
                cellPattern: [[0,0], [1,0], [0,1]],
                description: "+50% —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ 20 –º–∏–Ω<br>75 –æ—á–∫–æ–≤/–º–∏–Ω—É—Ç—É",
                size: 3
            }
        };

        const config = buildingConfigs[this.type];
        Object.assign(this, config);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –¥–ª—è –ü–∞—Ä–∫–∞ (–ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ)
    getCenterPosition(q, r) {
        if (this.type === 'PARK' && this.hasEmptyCenter) {
            return [q + this.centerCell[0], r + this.centerCell[1]];
        }
        return null;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –≤–∫–ª—é—á–∞—è —Ü–µ–Ω—Ç—Ä (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏)
    getAllCells(q, r) {
        const allCells = [...this.cells];

        // –î–ª—è –ü–∞—Ä–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–ª–µ—Ç–∫—É –≤ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        if (this.type === 'PARK' && this.hasEmptyCenter) {
            allCells.push(this.centerCell);
        }

        return allCells.map(([dq, dr]) => [q + dq, r + dr]);
    }
}